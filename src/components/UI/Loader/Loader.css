.loaderContainer {
    display: flex;
    justify-content: center;
    align-items: center;
    /* 
        Si se necesita hacer mas grande
        Multiplicar el height por 2, 8 * 2 = 16rem
    */
    height: 2.5rem;
    /*
        Ubicando el contendor del Loader / -
        Spinner en el centro del grid en mainCards
        del elemento main.
    */
    grid-area: 2 / 2 / 3 / 3;
}

.loaderSvg {
    /*
        Se crea una animacion de rotacion
        para el loader, se le da un tiempo de 1s
        y se le da un efecto de linearidad
        para que la animacion sea constante
    */
    animation: spin 1s linear infinite;
    /* 
        Si se necesita hacer mas grande
        Multiplicar el height y width
        por 2, 2.5 * 2 = 5rem
    */
    height: 2.5rem;
    width: 2.5rem;
    color: #06b6d4;
}

.loaderSvg > circle {
    opacity: 0.25;
}

.loaderSvg > path {
    opacity: 1;
    color: white;
}

/*
    Se utiliza la propiedad @keyframes para crear
    una animacion de rotacion, se define que la 
    animacion va a ser de 0 a 360 grados, usando
    la propiedad transform y la funcion rotate.
    con la propiedad to se define el estado final
    de la animacion, en este caso 360 grados.
*/
@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/* ---------------------------------------------------------------------------------------------------------------------------------------------------- */

.BubbleLoader {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.4rem;
}

.BubbleLoader > span {
    width: 12px;
    height: 12px;
    background: #06b6d4;
    border-radius: 50%;
    animation: bubble 0.8s infinite ease-in-out;
}

.BubbleLoader span:nth-child(2) {
    animation-delay: 100ms;
}

.BubbleLoader span:nth-child(3) {
    animation-delay: 200ms;
}

.BubbleLoader span:nth-child(4) {
    animation-delay: 300ms;
}

@keyframes bubble {
    0%, 80%, 100% {
        transform: scale(0.6);
        opacity: 0.6;
    }
    40% {
        transform: scale(1);
        opacity: 1;
    }
}

/* ---------------------------------------------------------------------------------------------------------------------------------------------------- */

.BubbleSpinner {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
}

.BubbleSpinner > div {
    width: 2rem;
    height: 2rem;   
    position: absolute;
    animation: bubbleSpinner 1.2s infinite cubic-bezier(0.22, 0.61, 0.36, 1);
}

.BubbleSpinner span {
    width: 10px;
    height: 10px;
    position: absolute;
    background: #06b6d4;
    border-radius: 50%;
}

.BubbleSpinner div:nth-child(2) {
    animation-delay: 200ms;
}

.BubbleSpinner div:nth-child(3) {
    animation-delay: 400ms;
}

.BubbleSpinner div:nth-child(4) {
    animation-delay: 550ms;
}



@keyframes bubbleSpinner {
    from {
        transform: rotate(0deg);
        opacity: 0.5;
    }
    to {
        transform: rotate(360deg);
        opacity: 1;
    }
    /* 0% {
        transform: translate(0px, 0px) rotate(0deg);
        opacity: 0.6;
    }
    25% {
        transform: scale(1.1) translate(24px, 24px) rotate(90deg);
        opacity: 0.7;
    }
    50% {
        transform: translate(0px, 48px) rotate(180deg);
        opacity: 0.8;
    }
    75% {
        transform: translate(-24px, 24px) rotate(270deg);
        opacity: 0.9;
    }
    100% {
        transform: rotate(360deg);
        opacity: 1;
    } */
    /* 0% {
        transform: translate(0px, 0px) rotate(0deg);
    }
    10% {
        transform: translate(10px, 0px) rotate(45deg);
    }
    100% {
        transform: translate(10px, 10px) rotate(360deg);
    } */
}

/* ---------------------------------------------------------------------------------------------------------------------------------------------------- */

.CompleteLoader line {
    animation: changeCheck 2s forwards ease-in-out;
}

/* 
    Para crear una animacion que haga girar el circulo desde un punto inicial
    y valla rellenando la circunferencia del circulo con una linea
    se debe hallar primero la circunferencia de nuestro círculo

    Para esto debemos saber que un círculo se compone de
        1. Radio (Linea que va desde el centro cualquiera de sus puntos)
        2. Diámetro (Longitud recta que pasa por el centro y toca dos puntos del borde de un círculo
        3. Circunferencia (La distancia alrededor de un círculo A.K.A El perimetro del circulo)
    
        Ahora para calcular el Diámetro necesitamos el radio
            Formula: Diámetro = Radio x 2
        
        Para Calcular la circunferencia necesitamos el Díametro.
            Formula: Circunferencia = Diámetro x Pi
    
    Bonus:
        Si se necesita el calcular la longitud de arco de un semicirculo
        se usa la Circunferencia en terminos Pi (10Pi) dividido 2
    
    Para mas info https://es.khanacademy.org/math/cc-seventh-grade-math/cc-7th-geometry/cc-7th-area-circumference/a/radius-diameter-circumference
*/

/*
    stroke-dasharray se encarga de crear una línea discontinua
    stroke-dashoffset se encarga de crear un espacio entre la línea discontinua
    stroke-dashoffset es el valor que se le da a la línea discontinua
    cuando hablo de linea discontinua me refiero a la línea que se forma al dibujar el circulo
    stroke-dasharray es el valor que se le da a la línea discontinua

    para dar un efecto de relleno a la circunferencia del circulo
    se le da un valor a stroke-dasharray y stroke-dashoffset
    que sean iguales, esto hace que la línea discontinua se vea como una línea continua
    y al darle un valor a stroke-dashoffset se le da un valor de 0
    esto hace que la línea discontinua se vea como una línea continua

    Por lo tanto al mover el stroke-dashoffset de 119.3 a 0
    se va rellenando la circunferencia del circulo, ya que el espacio entre la linea discontinua se va reduciendo
    y al llegar a 0 se ve como una línea continua o un circulo

    par mas info https://nikitahl.com/svg-circle-progress
*/
.CompleteLoader circle {
    stroke-dasharray: 119.3;
    stroke-dashoffset: 119.3;
    animation: fillCircleCircunference 2s linear normal forwards;
}

@keyframes fillCircleCircunference {
    from {
        /* 
            Aqui se usa la circunferencia
            que es C = (r x 2) x pi
            C = (19 x 2) x pi
        */
        stroke-dashoffset: 119.3;
    }
    to {
        stroke-dashoffset: 0;
    }
}

@keyframes changeCheck {
    from {
        opacity: 0.6;
        stroke: #01ff01;
        stroke-width: 1;
    }
    to {
        opacity: 1;
        stroke: white;
        stroke-width: 3;
    }
}
